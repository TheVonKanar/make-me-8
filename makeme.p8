pico-8 cartridge // http://www.pico-8.com
version 41
__lua__

#include content.p8

-- constants
title_speed = 1
title_y_start = 10
title_y_end = 16
title_timer_speed = 8

timer_min = 1
timer_speed = 1 / 500

order_speed = 2
order_y_start = -22
order_y_end = 16

score_speed = 1
score_y = 48
score_timeout = -5

refresh_malus = 15

dpad_x = 64
dpad_y = 90
dpad_r = 8

word_bg_color = "\#7"

shake_str = 2
shake_dur = 6

-- globals
is_playing = false
is_loading = false
start_co = nil
loading_co = nil

title = { "" }
title_y_1 = title_y_end
title_y_2 = title_y_end
title_y_3 = title_y_end

t = 0

order = nil
orders = {}
order_y_1 = order_y_end
order_y_2 = order_y_end
order_y_3 = order_y_end
order_color = 0

score = 0
score_x = 0
gain = 0
gain_x = 0
loss = 0
loss_x = 0

words = { { "" }, { "" }, { "" }, { "" } }
words_x = { 0, 0, 0, 0 }
words_y = { dpad_y - 2, dpad_y - 2, dpad_y - dpad_r - 10, dpad_y + dpad_r + 6 }

shake_co = { nil, nil, nil, nil }
wave_co = nil
wave_color = 0

bg_spr_i = 0

debug = 0

-- init
function _init()
    -- setup app
    extcmd("set_title", "Make Me 8")

    -- setup orders
    for i = 1, #raw_orders do
        local o = raw_orders[i]
        for j = 0, o[4] do
            add(orders, { o[1], o[2], o[3], i })
        end
    end

    -- pick first title
    pick_title()

    -- play music
    music(0)
end

function do_start_game()
    sfx(2)

    is_loading = true

    -- pick first order
    --pick_order()

    -- pick first words
    refresh(false)

    t = 0
    update_game()

    order = title

    -- loading screen
    cls(tonum(sub(title[3], 2, 2), 0x1))
    for i = 0, 5 do
        yield()
    end

    t = 0
    is_playing = true
    is_loading = false
    start_co = nil
end

-- game loop
function _update60()
    if is_playing then update_game() else update_menu() end

    if start_co != nil then coresume(start_co) end
end

function update_menu()
    if t > 100 then
        pick_title()
    end

    t += title_timer_speed

    if title_y_1 < title_y_end then title_y_1 += order_speed end
    if title_y_2 < title_y_end then title_y_2 += order_speed end
    if title_y_3 < title_y_end then title_y_3 += order_speed end

    if start_co == nil and btnp(4) then
        start_co = cocreate(do_start_game)
    end
end

function update_game()
    -- out of time
    if t > 100 then
        lose(score_timeout)
        pick_order()
    end

    if not is_loading then
        -- update time
        t += 0.2 + max(0, score * timer_speed)

        -- inputs
        if btnp(0) then answer(1) end
        if btnp(1) then answer(2) end
        if btnp(2) then answer(3) end
        if btnp(3) then answer(4) end
        if btnp(5) then quit() end
        if btnp(4) then refresh(true) end
    end

    -- compute text widths for alignment
    local score_w = print("\^w\^t" .. score, 0, 0) - 3
    score_x = 64 - flr(score_w / 2)

    local words_w = { 0, 0, 0, 0 }
    words_w[1] = print(words[1][1], 0, 0) - 2
    words_x[1] = 64 - words_w[1] - dpad_r - 10

    words_x[2] = 64 + dpad_r + 10

    words_w[3] = print(words[3][1], 0, 0) - 2
    words_x[3] = 64 - flr(words_w[3] / 2) - 0

    words_w[4] = print(words[4][1], 0, 0) - 2
    words_x[4] = 64 - flr(words_w[4] / 2) - 0

    -- animate order popup
    if order_y_1 < order_y_end then order_y_1 += order_speed end
    if order_y_2 < order_y_end then order_y_2 += order_speed end
    if order_y_3 < order_y_end then order_y_3 += order_speed end

    -- animate score gain/loss
    if gain_x == nil then
        gain_x = score_x + score_w
    else
        if gain_x < 256 then gain_x += score_speed end
    end

    if loss_x == nil then
        loss_w = print("\^w\^t" .. loss, 0, 0) - 3
        loss_x = score_x - loss_w
    else
        if loss_x > -256 then loss_x -= score_speed end
    end
end

-- rendering
function _draw()
    if is_playing then
        draw_game()
    else
        if is_loading then draw_loading() else draw_menu() end
    end
end

function draw_menu()
    -- clear screen
    cls(0)

    --rect(0, 0, 127, 127, 7)
    --rect(0, 0, 127, 127, tonum(sub(title[3], 2, 2), 0x1))

    local x = 8
    if title[1] != nil then x = print("\^w\^t" .. title[1] .. " ", x, title_y_end, 7) end
    if title[2] != nil then x = print("\^w\^t" .. title[2] .. " ", x, title_y_2, 7) end
    if title[3] != nil then x = print("\^w\^t" .. title[3], x, title_y_3, 7) end

    --rectfill(30, 60, 98, 68, 1)
    print("press 🅾️ to start", 31, 62, 7)

    print("by thevonkanar", 3, 120, 6)
    print("ggj2024", 98, 120, 6)
end

function draw_loading()
end

function draw_game()
    -- clear screen
    cls(0)

    -- background
    --map()

    -- animate wave
    if wave_co != nil then coresume(wave_co, wave_color) end

    -- border
    order_color = tonum(sub(order[3], 2, 2), 0x1)
    rect(0, 8, 127, 118, order_color)

    -- show order
    local x = 8
    if order[1] != nil then x = print("\^w\^t" .. order[1] .. " ", x, order_y_end, 7) end
    if order[2] != nil then x = print("\^w\^t" .. order[2] .. " ", x, order_y_2, 7) end
    if order[3] != nil then x = print("\^w\^t" .. order[3], x, order_y_3, 7) end

    -- show timer
    rectfill(0, 0, (1 - t / 100) * 126, 6, order_color)

    -- show score
    print("\^w\^t" .. score, score_x, score_y - 4, 7)
    if loss != 0 then print("\^w\^t" .. loss, loss_x, score_y - 4, 8) end
    if gain != 0 then print("\^w\^t+" .. gain, gain_x, score_y - 4, 11) end

    -- show d-pad
    print("⬅️", dpad_x - dpad_r - 3, dpad_y - 2, 7)
    print("➡️", dpad_x + dpad_r - 3, dpad_y - 2, 7)
    print("⬆️", dpad_x - 3, dpad_y - dpad_r, 7)
    print("⬇️", dpad_x - 3, dpad_y + dpad_r - 4, 7)

    -- animate words
    for i = 1, 4 do
        if shake_co[i] != nil then coresume(shake_co[i], i) end
    end

    -- show words
    for i = 1, 4 do
        print(word_bg_color .. words[i][1], words_x[i], words_y[i], order_color)
    end

    -- show footer
    print("🅾️ refresh", 3, 121, 7)
    print("restart ❎", 86, 121, 7)

    -- debug
    -- print(debug, 2, 24, 7)
end

function pick_title()
    -- handle timer
    t = 0

    -- pick new order
    local new_title = rnd(orders)
    while title != nil and new_title[4] == title[4] do
        new_title = rnd(orders)
    end
    title = new_title

    -- setup new order anim values
    if title[1] != "make" then title_y_1 = title_y_start end
    if title[2] != "me" then title_y_2 = title_y_start end
    title_y_3 = title_y_start
end

function pick_order(animate)
    -- handle timer
    t = 0

    -- pick new order
    local new_order = rnd(orders)
    while order != nil and new_order[4] == order[4] do
        new_order = rnd(orders)
    end
    order = new_order

    -- setup new order anim values
    if order[1] != "make" then order_y_1 = order_y_start end
    if order[2] != "me" then order_y_2 = order_y_start end
    order_y_3 = order_y_start
end

function pick_word(word_i, animate)
    local new_word = nil
    local continue = true
    while continue do
        new_word = rnd(raw_words)
        continue = false
        for i = 1, 4 do
            if new_word[1] == words[i][1] then continue = true end
        end
    end

    words[word_i] = new_word

    if animate then shake_co[word_i] = cocreate(do_shake) end
end

function answer(i)
    local value = words[i][order[4] + 1]

    if value > 0 then win(value) end
    if value < 0 then lose(value) end

    pick_order(true)
    pick_word(i, true)
end

function win(val)
    score += val
    gain = val
    gain_x = nil

    wave_color = 11
    wave_co = cocreate(do_wave)

    sfx(0)
end

function lose(val)
    score += val
    loss = val
    loss_x = nil

    wave_color = 8
    wave_co = cocreate(do_wave)

    sfx(1)
end

function quit()
    extcmd("reset")
end

function refresh(animate)
    for i = 1, 4 do
        pick_word(i, animate)
    end

    t += refresh_malus

    if animate then sfx(2) end
end

function do_shake(word_i)
    local base_x = words_x[word_i]
    local base_y = words_y[word_i]
    for i = 0, shake_dur do
        words_x[word_i] = base_x + cos(i / shake_dur) * shake_str
        words_y[word_i] = base_y + sin(i * 2 / shake_dur) * shake_str
        yield()
    end
end

function do_wave()
    local wave_dur = 20
    local offset = -3.5
    local max_dist = dist(7.5, 0, 7.5 - offset, 0 - offset)
    for i = 0, wave_dur do
        bg_spr_i += 1 / 5
        if bg_spr_i > 4 then bg_spr_i = 0 end
        for y = 1, 14 do
            for x = 0, 15 do
                local dist = dist(7.5, x, 7.5 - offset, y)
                if dist / max_dist > i / wave_dur then
                    spr(flr(bg_spr_i) + 1, x * 8, y * 8)
                end
            end
        end

        yield()
    end
end

function dist(x1, x2, y1, y2)
    return sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))
end

__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001100000011110000001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000011000000010010000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000011000000000000000000110001001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001100000000000000001100001111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100000e7500f7500f7500f7500f7500f7501075010750107501175012750127501375014750157501675017750187501a7501b7501c7501e75020750227502475027750297502c7503175034750387503d750
0001000036150311502d1502815025150201501d1501a15018150161501415012150111500f1500e1500e1500d1500c1500b1500a150091500815007150061500615005150041500415003150021500215001150
000100002a6502665023650206501e6501c6501a65018650166501565013650116500f6500d6500c6500b6500a650096500865007650066500665005650056500465004650046500465003650036500365003650
000200000e5500e5500f5500f55010550105501055011550115501255013550135501455014550145501555015550155501655016550175501855018550195501a5501b5501c5501d5501e5501f5502055022550
000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0010000024720227201e7201b7201a72018720177201572016720187201b7201e72021720217201e7201872016720187201b7201e7202172024720227201d720187201c7202072026720287202a7202972026720
001000000250002500025001354002500025000250009540025000550000000125400000000000000000554000000000000000011540035000000000000065400000000000035000e54000000000000150002540
__music__
03 0b0c4344

